`include "bag.vh"

module In_Service (
    // Inputs
    input  clock,
    input  reset,

    input [2:0] priority_rotate,
    input [7:0] interrupt_special_mask,// Inputs from control logic
    input [7:0] interrupt,//from priorty resolver
    input  latch_in_service,
    input [7:0] end_of_interrupt,

    // Outputs
    output reg [7:0] in_service_register,
    output reg [7:0] highest_level_in_service
);

 
    //
    // In service register
    //
    wire [7:0]   next_in_service_register;
    assign next_in_service_register = (in_service_register & ~end_of_interrupt)
                                     | (latch_in_service ? interrupt : 8'b00000000);
                                     

    always @(negedge clock or posedge reset) begin
        if (reset)
            in_service_register <= 8'b00000000;
        else
            in_service_register <= next_in_service_register;
    end



    //
    // Get Highest level in service
    //
    reg [7:0]   next_highest_level_in_service;



    always @(posedge clock or posedge reset) begin
        next_highest_level_in_service = next_in_service_register & ~interrupt_special_mask;
        next_highest_level_in_service = rotate_right(next_highest_level_in_service, priority_rotate);
        next_highest_level_in_service = resolv_priority(next_highest_level_in_service);
        next_highest_level_in_service = rotate_left(next_highest_level_in_service, priority_rotate );
            end
            
   always @(posedge clock or posedge reset) begin
        if (reset)
            highest_level_in_service <= 8'b00000000;
        else
            highest_level_in_service <= next_highest_level_in_service;
    end

endmodule
