`define TB_CYCLE        20
`define TB_FINISH_COUNT 20000

module In_Service_tb();


    `ifdef IVERILOG
        initial begin
            $dumpfile("tb.vcd");
            $dumpvars(0, tb);
        end
    `endif

    reg clock;
    initial clock = 1'b1;
    always #(`TB_CYCLE / 2) clock = ~clock;

    reg reset;
    initial begin
        reset = 1'b1;
        #(`TB_CYCLE * 10)
        reset = 1'b0;
    end

    reg [31:0] tb_cycle_counter;
    always @(negedge clock or posedge reset) begin
        if (reset)
            tb_cycle_counter <= 32'h0;
        else
            tb_cycle_counter <= tb_cycle_counter + 32'h1;
    end

    always @(tb_cycle_counter) begin
        if (tb_cycle_counter == `TB_FINISH_COUNT) begin
            $display("***** SIMULATION TIMEOUT ***** at %d", tb_cycle_counter);
            `ifdef IVERILOG
                $finish;
            `elsif MODELSIM
                $stop;
            `else
                $finish;
            `endif
        end
    end

    reg [2:0]   priority_rotate;
    reg [7:0]   interrupt;
    reg [7:0]   interrupt_special_mask;
    reg         latch_in_service;
    reg [7:0]   end_of_interrupt;
    wire [7:0]   in_service_register;
    wire [7:0]   highest_level_in_service;
    
        In_Service isrtb (
         .clock(clock),
         .reset(reset),
         .priority_rotate(priority_rotate),
         .latch_in_service(latch_in_service),
         .interrupt(interrupt),
         .end_of_interrupt(end_of_interrupt),
         .in_service_register(in_service_register),
         .highest_level_in_service(highest_level_in_service),
         .interrupt_special_mask(interrupt_special_mask));


    task TASK_INIT;
        begin
            #(`TB_CYCLE * 0);
            priority_rotate  = 3'b111;
            interrupt        = 8'b00000000;
            latch_in_service = 1'b0;
            end_of_interrupt = 8'b00000000;
            interrupt_special_mask = 8'b00000000;
            #(`TB_CYCLE * 12);
        end
    endtask

    task TASK_INTERRUPT;
        input [7:0] in;
        begin
            #(`TB_CYCLE * 0);
            interrupt        = in;
            latch_in_service = 1'b0;
            #(`TB_CYCLE * 1);
            latch_in_service = 1'b1;
            #(`TB_CYCLE * 1);
            interrupt        = 8'b00000000;
            latch_in_service = 1'b0;
            #(`TB_CYCLE * 1);
        end
    endtask

    task TASK_END_OF_INTERRUPT;
        input [7:0] in;
        begin
            #(`TB_CYCLE * 0);
            end_of_interrupt = in;
            #(`TB_CYCLE * 1);
            end_of_interrupt = 8'b00000000;
            #(`TB_CYCLE * 1);
        end
    endtask

 task TASK_SCAN_INTERRUPT;
        begin
            #(`TB_CYCLE * 0);
            TASK_INTERRUPT(8'b10000000);
            TASK_INTERRUPT(8'b01000000);
            TASK_INTERRUPT(8'b00100000);
            TASK_INTERRUPT(8'b00010000);
            TASK_INTERRUPT(8'b00001000);
            TASK_INTERRUPT(8'b00000100);
            TASK_INTERRUPT(8'b00000010);
            TASK_INTERRUPT(8'b00000001);
            #(`TB_CYCLE * 1);
        end
    endtask

    task TASK_SCAN_END_OF_INTERRUPT;
        begin
            #(`TB_CYCLE * 0);
            TASK_END_OF_INTERRUPT(8'b00000001);
            TASK_END_OF_INTERRUPT(8'b00000010);
            TASK_END_OF_INTERRUPT(8'b00000100);
            TASK_END_OF_INTERRUPT(8'b00001000);
            TASK_END_OF_INTERRUPT(8'b00010000);
            TASK_END_OF_INTERRUPT(8'b00100000);
            TASK_END_OF_INTERRUPT(8'b01000000);
            TASK_END_OF_INTERRUPT(8'b10000000);
            #(`TB_CYCLE * 1);
        end
    endtask

    initial begin
        TASK_INIT();

        $display("***** TEST ROTATE 7 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b111;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 6 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b110;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 5 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b101;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 4 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b100;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 3 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b011;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 2 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b010;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 1 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b001;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        $display("***** TEST ROTATE 0 ***** at %d", tb_cycle_counter);
        priority_rotate = 3'b000;
        #(`TB_CYCLE * 1);
        TASK_SCAN_INTERRUPT();
        TASK_SCAN_END_OF_INTERRUPT();

        #(`TB_CYCLE * 1);

        `ifdef IVERILOG
            $finish;
        `elsif MODELSIM
            $stop;
        `else
            $finish;
        `endif
    end
endmodule

