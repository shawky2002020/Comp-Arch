`define TB_CYCLE        20
`define TB_FINISH_COUNT 20000

module Bus_control_tb;

    reg clock;
    initial clock = 1'b1;
    always #(`TB_CYCLE / 2) clock = ~clock;

    reg reset;
    initial begin
        reset = 1'b1;
        #(`TB_CYCLE * 10)
        reset = 1'b0;
    end

    reg [31:0] tb_cycle_counter;
    always @(negedge clock or posedge reset) begin
        if (reset)
            tb_cycle_counter <= 32'h0;
        else
            tb_cycle_counter <= tb_cycle_counter + 32'h1;
    end

    always @* begin
        if (tb_cycle_counter == `TB_FINISH_COUNT) begin
            $display("***** SIMULATION TIMEOUT ***** at %d", tb_cycle_counter);
            $finish;
        end
    end

    reg chip_select_n;
    reg read_enable_n;
    reg write_enable_n;
    reg address;
    reg [7:0] data_bus_in;

    wire [7:0] internal_data_bus;
    wire write_initial_command_word_1;
    wire write_initial_command_word_2_4;
    wire write_operation_control_word_1;
    wire write_operation_control_word_2;
    wire write_operation_control_word_3;
    wire read;

    // Module under test instance
    Bus_control bus_tb (
        .clock(clock),
        .reset(reset),
        .chip_select_n(chip_select_n),
        .read_enable_n(read_enable_n),
        .write_enable_n(write_enable_n),
        .address(address),
        .data_bus_in(data_bus_in),
        .internal_data_bus(internal_data_bus),
        .write_initial_command_word_1(write_initial_command_word_1),
        .write_initial_command_word_2_4(write_initial_command_word_2_4),
        .write_operation_control_word_1(write_operation_control_word_1),
        .write_operation_control_word_2(write_operation_control_word_2),
        .write_operation_control_word_3(write_operation_control_word_3),
        .read(read)
    );

    // Initialization task
    task TASK_INIT;
      begin
        #(`TB_CYCLE * 0);
        chip_select_n   = 1'b1;
        read_enable_n   = 1'b1;
        write_enable_n  = 1'b1;
        address         = 1'b0;
        data_bus_in     = 8'b00000000;
        #(`TB_CYCLE * 12);
      end
    endtask

    // Write data task
    task TASK_WRITE_DATA(input [1:0] addr, input [7:0] data);
      begin
        #(`TB_CYCLE * 0);
        chip_select_n   = 1'b0;
        write_enable_n  = 1'b0;
        address         = addr;
        data_bus_in     = data;
        #(`TB_CYCLE * 1);
        write_enable_n  = 1'b1;
        chip_select_n   = 1'b1;
        #(`TB_CYCLE * 1);
      end
    endtask

    // Test pattern
    initial begin
        TASK_INIT();
        TASK_WRITE_DATA(1'b0, 8'b00010000);
        TASK_WRITE_DATA(1'b1, 8'b00000000);
        TASK_WRITE_DATA(1'b0, 8'b00000000);
        TASK_WRITE_DATA(1'b0, 8'b00001000);
        #(`TB_CYCLE * 1);
        read_enable_n   = 1'b0;
        chip_select_n   = 1'b0;
        #(`TB_CYCLE * 1);
        read_enable_n   = 1'b1;
        chip_select_n   = 1'b1;
        #(`TB_CYCLE * 1);
        read_enable_n   = 1'b0;
        chip_select_n   = 1'b0;
        #(`TB_CYCLE * 1);
        read_enable_n   = 1'b1;
        #(`TB_CYCLE * 1);
        chip_select_n   = 1'b1;
        #(`TB_CYCLE * 1);

        // End of simulation
        $finish;
    end
endmodule
